# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

                    - nome: PHP Code Sniffer (php-actions)
  # Você pode fixar no commit exato ou na versão.
  # usos: php-actions/phpcs@dfdd77a6edfc6d0d0f194bdf0c934c8d841ea2fa
  usos: php-actions/phpcs@v1.0.0
  com:
    # Qual versão do PHPCS usar
    versão: # opcional, o padrão é o mais recente
    # Qual versão do PHP usar
    php_version: # opcional, o padrão é o mais recente
    # Caminho para um binário phps vendido
    vendored_phpcs_path: # opcional
    # Um ou mais arquivos e/ou diretórios para verificar
    caminho:
    # O nome ou caminho do padrão de codificação a ser usado
    padrão:
    # Uma lista separada por vírgulas de códigos sniff para incluir a verificação (todos os sniffs devem fazer parte do padrão especificado)
    sniffs: # opcional
    # Uma lista separada por vírgulas de códigos sniff a serem excluídos da verificação (todos os sniffs devem fazer parte do padrão especificado)
    excluir: # opcional
    # Uma lista separada por vírgulas de padrões para ignorar arquivos e diretórios
    ignorar: # opcional
    # O número de espaços que cada tabulação representa
    tab_width: # opcional
    # Imprima o relatório "full", "xml", "checkstyle", "csv", "json", "junit", "emacs", "source", "summary", "diff", "svnblame", "gitblame", "hgblame" ou "notifysend" ou especifique o caminho para uma classe de relatório personalizada (o relatório "full" é impresso por padrão)
    relatório: # o padrão está cheio
    # Grave o relatório no caminho de arquivo especificado
    report_file: # opcional
    # Quantas colunas os relatórios de tela larga devem ser impressos ou definidos como "automático" para usar a largura de tela atual, quando suportado
    report_width: # opcional
    # Um caminho para remover da frente os caminhos de arquivo dentro dos relatórios
    caminho base: # opcional
    # Uma lista separada por vírgulas de arquivos a serem executados antes do início do processamento
    bootstrap: # opcional
    # A codificação dos arquivos que estão sendo verificados (o padrão é utf-8)
    codificação: # opcional
    # Uma lista separada por vírgulas de extensões de arquivo para verificar. O tipo do arquivo pode ser especificado usando: ext/type, por exemplo, module/php,es/js
    extensões: # opcional
    # A gravidade mínima necessária para exibir um erro ou aviso
    gravidade: # opcional
    # A gravidade mínima necessária para exibir um erro
    error_severity: # opcional
    # A gravidade mínima necessária para exibir um aviso
    warning_severity: # opcional
    # Argumentos extras para passar para o binário phps
    args: # opcional
          
